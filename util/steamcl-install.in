#!/bin/bash
# vim: sw=4 sts=4 et

# steamos-efi  --  SteamOS EFI Chainloader

# SPDX-License-Identifier: GPL-2.0+
# Copyright © 2018-2020Collabora Ltd
# Copyright © 2018-2020 Valve Corporation
# Copyright © 2018,2019 Vivek Das Mohapatra <vivek@etla.org>

# This file is part of steamos-efi.

# steamos-efi is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2.0 of the License, or
# (at your option) any later version.

# steamos-efi is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with steamos-efi.  If not, see <http://www.gnu.org/licenses/>.

set -eu;
shopt -s extglob;

. /etc/os-release

export LC_ALL=C;
prefix=@prefix@;
datadir=@datarootdir@/@PACKAGE@;
libexecdir=@pkglibexecdir@;
exec_prefix=@exec_prefix@;
bindir=@bindir@;

ESP_UUID=c12a7328-f81f-11d2-ba4b-00a0c93ec93b;
esp_uuid=;  # uuid (partition type)
esp_partuuid=; # partuuid (partition uuid)
esp_dev=;   # /dev/sd?
esp_part=;  # X (as in /dev/sdaX)
esp_mount=; # usually /esp on SteamOS 3+
esp_fs=;    # fs type (vfat)

boot_entries=; # space separated list of HEXBOOTID:LOADERPATH
all_boot_ids=; # space separated list of HEXBOOTID
free_boot_id=; # an unused HEXBOOTID
boot_path_found=; # set if a matching boot entry was found by check_boot_path

pretty_name=${PRETTY_NAME:-"SteamOS"};
distrib=${ID:-steamos};
distrib=${distrib,,};
manifest_checksum=;
manifest_version=;
checksum=;
installpath=EFI/$distrib;

flags=; # comma separated list of flags
force_extra_removable=0;
force_removable_efiboot=0;

restricted=0;
verbose=0;

usage_message="\
$(basename $0) [OPTION]

Install the steam chainloader on the ESP partition, and create an EFI boot
entry if needed.

--flags FLAG1,FLAG2,...

    Comma separated list of flags to set. For every FLAG specified, a flag file
    named 'steamcl-FLAG' will be installed next to the chainloader.  For every
    FLAG that is not specified, the corresponding flag file 'steamcl-FLAG' will
    be removed.

    If this option is used in conjonction with '--force-extra-removable', the
    flag files are also set at the removable media path.

    If this option is not specified, the existing flag files are not modified.

    Supported flags:
    - restricted: Restrict the chainloader to select ONLY stage 2 bootloaders
      that are installed on the same medium.
    - verbose: Make the chainloader chatty.

--force-extra-removable

    Also install the chainloader at the removable media path (for x86_64 arch:
    efi/boot/bootx64.efi).

--force-removable-efiboot

    Create an EFI boot entry, even if the chainloader is booted from a removable
    medium.
"

warn () { echo "$@" >&2; }

version_compare()
{
    test "$(vercmp "$1" "$3")" "-$2" 0
}

############################################################################
# read in a packaging version file (checksum + package-version)
read_manifest ()
{
    manifest_checksum=;
    manifest_version=;
    src=$1;

    if [ -f $src ];
    then
        read manifest_checksum manifest_version < "$src";
    fi;

    return 0;
}

calculate_checksum ()
{
    local x=;
    local file=${1:-/dev/null};
    # checksum of /dev/null
    checksum=e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855;

    if [ -f "$file" ]
    then
        read checksum x < <(sha256sum "$file");
    fi;

    return 0;
}

############################################################################
# determine the location of the esp and its current mount point if any
unquote()
{
    local tmp="$1"

    tmp="${tmp%\"}"
    tmp="${tmp#\"}"
    echo "$tmp"
}

find_esp ()
{
    esp_fs=;
    esp_dev=;
    esp_part=;
    esp_mount=;
    esp_uuid=;
    esp_partuuid=;

    local part=;
    local dev=;
    local ptuid=;
    local ptuuid=;
    local fs=;
    local mount=;

    # In case /esp is supposed to be automounted by systemd,
    # let's make sure it's actually mounted, otherwise the
    # output from the lsblk commands below will be incomplete.
    ls /esp >/dev/null

    # Find esp according to fs, parttuid and mountpoint
    while read part dev ptuid ptuuid fs mount;
    do
        part=$(unquote "${part#*=}");
        dev=$(unquote "${dev#*=}");
        ptuid=$(unquote "${ptuid#*=}");
        ptuuid=$(unquote "${ptuuid#*=}");
        fs=$(unquote "${fs#*=}");
        mount=$(unquote "${mount#*=}");

        if [ "$fs"    != vfat        ]; then continue; fi;
        if [ "$ptuid" != "$ESP_UUID" ]; then continue; fi;
        if [ "$mount" != /esp        ]; then continue; fi;

        esp_fs="$fs";
        esp_dev="$dev";
        esp_part="$part";
        esp_mount="$mount";
        esp_uuid="$ptuid";
        esp_partuuid="$ptuuid";
        break;
    done < <(lsblk -np --pairs -o NAME,PKNAME,PARTTYPE,PARTUUID,FSTYPE,MOUNTPOINT);

    # If not found, loosen the requirement to fs and parttuid only
    if [ -z "$esp_dev" ] || [ -z "$esp_part" ];
    then
        esp_fs=;
        esp_dev=;
        esp_part=;
        esp_mount=;
        esp_uuid=;
        esp_partuuid=;
        while read part dev ptuid ptuuid fs mount;
        do
            part=$(unquote "${part#*=}");
            dev=$(unquote "${dev#*=}");
            ptuid=$(unquote "${ptuid#*=}");
            ptuuid=$(unquote "${ptuuid#*=}");
            fs=$(unquote "${fs#*=}");
            mount=$(unquote "${mount#*=}");

            if [ "$fs"    != vfat        ]; then continue; fi;
            if [ "$ptuid" != "$ESP_UUID" ]; then continue; fi;

            esp_fs="$fs";
            esp_dev="$dev";
            esp_part="$part";
            esp_mount="$mount";
            esp_uuid="$ptuid";
            esp_partuuid="$ptuuid";
            break;
        done < <(lsblk -np --pairs -o NAME,PKNAME,PARTTYPE,PARTUUID,FSTYPE,MOUNTPOINT);
    fi;

    # If not found, be very loose and just check the mountpoint.
    # This is to workaround https://github.com/go-debos/debos/issues/160
    if [ -z "$esp_dev" ] || [ -z "$esp_part" ];
    then
        esp_fs=;
        esp_dev=;
        esp_part=;
        esp_mount=;
        esp_uuid=;
        esp_partuuid=;
        while read part dev ptuid ptuuid fs mount;
        do
            part=$(unquote "${part#*=}");
            dev=$(unquote "${dev#*=}");
            ptuid=$(unquote "${ptuid#*=}");
            ptuuid=$(unquote "${ptuuid#*=}");
            fs=$(unquote "${fs#*=}");
            mount=$(unquote "${mount#*=}");

            if [ "$mount" != /esp ]; then continue; fi;

            esp_fs="$fs";
            esp_dev="$dev";
            esp_part="$part";
            esp_mount="$mount";
            esp_uuid="$ptuid";
            esp_partuuid="$ptuuid";
            break;
        done < <(lsblk -np --pairs -o NAME,PKNAME,PARTTYPE,PARTUUID,FSTYPE,MOUNTPOINT);
    fi;

    if [ -z "$esp_dev" ] || [ -z "$esp_part" ];
    then
        warn "ESP not found by part-type ($ESP_UUID) or path (/esp)";
        return 1;
    fi;

    # If the esp is listed in /etc/fstab or in a systemd mount unit,
    # then it should be easy to mount it.
    if [ -z "$esp_mount" ];
    then
        mount "$esp_part"
        esp_mount=$(findmnt "$esp_part" -no target)
    fi

    if [ -z "$esp_mount" ];
    then
        warn "ESP on $esp_part is not mounted";
        return 1;
    fi;

    esp_part=${esp_part:${#esp_dev}};
    esp_part=${esp_part/p/};

    return 0;
}

############################################################################
# whether EFI variables are supported on this system
efi_vars_supported ()
{
    [ -e /sys/firmware/efi/vars ] || [ -e /sys/firmware/efi/efivars ];
}

############################################################################
# find matching efiboot entries:
find_boot_entries ()
{
    local distributor=${1:-steamos}; shift;
    local dev=$1;                    shift;
    local part=${1:-999};            shift;
    local bootid=;
    local entry=;
    local label=;
    local epart=;
    local epath=;
    local edist=;

    all_boot_ids=;
    boot_entries=;
    distributor=${distributor,,};

    while read -r bootid entry;
    do

        bootid=${bootid%\*};

        case $bootid in (Boot+([0-9A-Fa-f])) true; ;; *) continue; esac;

        all_boot_ids=${all_boot_ids}${all_boot_ids:+ }${bootid#Boot};

        case $entry  in (*+([ 	])HD\(*) true; ;; *) continue; esac;

        label=${entry%%HD\(*};

        epart=${entry#*HD\(};
        epart=${epart%%,*}

        if [ ! ${epart:-0} -eq ${part} ]; then continue; fi;

        epath=${entry##*/File\(};
        epath=${epath%\)*};
        epath=${epath//\\/\/};

        edist=${epath#?(/)EFI/}
        edist=${edist%%/*};

        if [ "${edist,,}" = "$distributor" ];
        then
            local new_entry=${bootid#Boot}:$epath;
            boot_entries=$boot_entries${boot_entries:+ }${new_entry};
        fi;
    done < <(efibootmgr -v);
}

choose_free_boot_id ()
{
    free_boot_id=;
    local id=0;

    for be in "$@";
    do
        if [ $((16#$be)) = $id ]; then : $((id++)); fi;
    done

    free_boot_id=$(printf "%04X" $id);
}

update_esp ()
{
    local dst=$1; shift;
    local esp=$1; shift;
    local bin=$1; shift;
    local ver=$1; shift;
    local cfg=$1; shift;
    local bootdir=/efi/"$dst";
    local bootnum=;
    local entry=;

    for entry in "$@";
    do
        local this_bootnum=${entry%%:*};
        local this_bootpath=${entry#*:};

        if [ "${this_bootpath,,}" = "$bootdir/steamcl.efi" ];
        then
            bootnum="$this_bootnum";
            break;
        fi;
    done;

    if [ -n "$bootnum" ];
    then
        echo "Replacing boot entry Boot$bootnum @ $bootdir/steamcl.efi";
    else
        echo "Installing bootloader @ $bootdir/steamcl.efi (first install, no boot entry yet)";
    fi;

    mkdir -p ${esp}${bootdir};
    cp -av ${bin} ${esp}${bootdir}/steamcl.efi;
    cp -av ${ver} ${esp}${bootdir}/steamcl-version;
    cp -av ${cfg} ${esp}${bootdir}/steamos-bootconf;

    # install the chainloader in the EFI fallback (RC) position in case we boot without an explicit efiboot entry
    # FUTURE: We should skip this step if $espbootloader exists but doesn't look like it's one of ours
    espbootdir=${esp}efi/boot
    echo "Installing bootloader to ${espbootdir}/bootx64.efi";
    mkdir -p ${espbootdir};
    cp -av ${bin} ${espbootdir}/bootx64.efi ||:

    return 0;
}

update_flags ()
{
    local dst=$1; shift;
    local esp=$1; shift;
    declare -a bootdirs;

    bootdirs+=(/efi/"$dst");
    if [ $force_extra_removable = 1 ];
    then
        bootdirs+=(/efi/boot);
    fi;

    for bootdir in "${bootdirs[@]}";
    do
        for flag in restricted verbose;
        do
            local flagfile="steamcl-$flag";
            if [ ${!flag} = 1 ] && [ ! -e ${bootdir}/${flagfile} ];
            then
                echo "Enabling flag @ ${bootdir}/${flagfile}";
                mkdir -p ${esp}${bootdir};
                touch ${esp}${bootdir}/${flagfile};
                echo "-> '${esp}${bootdir}/${flagfile}'";
            elif [ ${!flag} = 0 ] && [ -e ${bootdir}/${flagfile} ];
            then
                echo "Removing flag @ ${bootdir}/${flagfile}";
                rm -fv ${esp}${bootdir}/${flagfile};
            fi;
        done;
    done;
}

add_boot_entry ()
{
    local dst=$1;
    local esp=$2;
    local bin=$3;
    local ver=$4;
    local bid=$5;
    local dev=$6;
    local gpt=$7;
    local nam=$8;

    local dir=/EFI/"$dst";
    local path="$esp""$dir";
    local ldr=$(basename $bin);

    printf "Creating Boot%s %s\n" ${bid:-0000} "$nam";
    dir=${dir//\//\\};
    efibootmgr -b $bid -c -d $dev -p $gpt -L "$nam" -l "$dir\\$ldr" > /dev/null;
}

check_boot_path ()
{
    local part=$1;
    local uuid=$2;
    local path=${3,,};
    local bootid=;
    local entry=;
    local epart=;
    local euuid=;
    local epath=;
    boot_path_found=;

    while read -r bootid entry;
    do
        bootid=${bootid%\*};
        case $bootid in (Boot+([0-9A-Fa-f])) true; ;; *) continue; esac;
        case $entry  in (*+([ 	])HD\(*)     true; ;; *) continue; esac;

        epart=${entry#*HD\(};
        epart=${epart%%,*}

        if [ ! ${epart:-0} -eq ${part} ]; then continue; fi;

        euuid=${entry#*GPT,};
        euuid=${euuid%%,*}

        if [ ${euuid:-00000000-0000-0000-0000-000000000000} != ${uuid} ]; then continue; fi;

        epath=${entry##*/File\(};
        epath=${epath%\)*};
        epath=${epath//\\/\/};
        epath=${epath,,};

        #echo "CMP $epath vs /$path";

        if [ "$epath" = "/$path" ];
        then
            boot_path_found=$epath;
            break;
        fi;
    done < <(efibootmgr -v);

    [ "$boot_path_found" != "" ];
}

############################################################################
# check to see if we're running off removable media
os_on_removable_media ()
{
    local path=$(readlink -f "$0");
    local bdev=$(df --output=source "$path" | tail -n +2);

    if [ -n "$bdev" ];
    then
        local remo;
        read remo < <(lsblk "$bdev" -o RM | tail -n +2);

        if [ x"$remo" = x1 ];
        then
            return 0;
        fi;
    fi;

    false;
}

############################################################################
# Do we need to add an efi boot entry
need_new_efi_boot_entry ()
{
    local epart=$1;
    local epath=$2;
    local euuid=${3:-};

    # _not_ forcing removable efi boot and we are actually on a removable medium:
    if [ $force_removable_efiboot -eq 0 ] && os_on_removable_media;
    then
        return 1;
    fi;

    # efi boot entry are not supported
    if ! efi_vars_supported;
    then
        return 1;
    fi;

    # efi boot entry already exists
    if check_boot_path $epart $euuid $epath;
    then
        return 1;
    fi;

    return 0;
}

############################################################################

while [ "$#" -gt 0 ];
do
    case "$1" in
        (--flags)
            shift;
            flags=$1;
            shift;
            ;;

        (--force-extra-removable)
            force_extra_removable=1;
            shift;
            ;;

        (--force-removable-efiboot)
            force_removable_efiboot=1;
            shift;
            ;;

        (--help|-h)
            echo "$usage_message";
            exit 0;
            ;;

        (*)
            warn "Unexpected argument '$1'";
            exit 1;
            ;;
    esac
done

for f in ${flags//,/ };
do
    case $f in
        (restricted)
            restricted=1;
            ;;

        (verbose)
            verbose=1;
            ;;

        (*)
            warn "Invalid flag $f";
            exit 1;
            ;;
    esac
done

find_esp;
echo "ESP $esp_fs $esp_uuid on $esp_dev GPT#$esp_part ${esp_partuuid:+PARTUUID=$esp_partuuid} ($esp_mount)";
find_boot_entries $distrib $esp_dev $esp_part;

# now some diagnotics:
esp_csum_ok=0;  # does the binary's checksum match the manifest's?
esp_boot_ok=0   # is there a bootloader entry for the canonical loader path?
pkg_csum_ok=0;  # is the package's bootloader binary ok?
esp_version=;   # version of the loader on the ESP (according to manifest)
pkg_version=;   # version of the loader package in the OS
pkg_checksum=;  # checksum of the loader binary in the OS package
esp_checksum=;  # checksum of the loader binary on the ESP
pkg_is_newer=0; # OS package has a newer loader than the ESP

read_manifest "$esp_mount/$installpath"/steamcl-version;
calculate_checksum "$esp_mount/$installpath"/steamcl.efi;
if [ ${checksum:-0} = ${manifest_checksum:-1} ];
then
    esp_csum_ok=1;
    esp_version=$manifest_version;
    esp_checksum=$manifest_checksum;
fi;

if ! need_new_efi_boot_entry $esp_part $installpath/steamcl.efi $esp_partuuid;
then
    esp_boot_ok=1;
fi;

read_manifest "$datadir"/steamcl-version;
calculate_checksum "$libexecdir"/steamcl.efi;
if [ ${checksum:-0} = ${manifest_checksum:-1} ];
then
    pkg_csum_ok=1;
    pkg_version=$manifest_version;
    pkg_checksum=$manifest_checksum;
fi;

if version_compare "${esp_version:-0}" lt "${pkg_version:-0}";
then
    pkg_is_newer=1;
elif version_compare "${esp_version:-0}" eq "${pkg_version:-0}";
then
    # updated(?) package without a version bump
    if [ "$esp_checksum" != "$pkg_checksum" ];
    then
        pkg_is_newer=1;
    fi;
fi

# let's walk through the logic here:
# bootloader entry !ok → create bootloader entry
# if package checksum is ok
# and esp is damaged/absent/old → install new bootloader binary + manifest

install_ok=1 # might not want/need a copy at all

if [ ${pkg_is_newer:-0} = 1 ] || [ $esp_csum_ok = 0 ];
then
    install_ok=0; # ok, we do need to copy the files in:
    if [ $pkg_csum_ok = 1 ]
    then
        if update_esp $distrib $esp_mount \
                      $libexecdir/steamcl.efi $datadir/steamcl-version \
                      $bindir/steamos-bootconf \
                      $boot_entries;
        then
            install_ok=1;
        fi;
    else
        echo Package checksum failure: $libexecdir/steamcl.efi:;
        echo " " checksum: $checksum;
        echo " " expected: $pkg_checksum;
    fi;
fi;

if [ -n "$flags" ];
then
    update_flags $distrib $esp_mount;
fi;

if [ $esp_boot_ok = 0 ];
then
    choose_free_boot_id $all_boot_ids;
    if add_boot_entry $distrib $esp_mount \
                      $libexecdir/steamcl.efi $datadir/steamcl-version \
                      $free_boot_id $esp_dev $esp_part "$pretty_name";
    then
        esp_boot_ok=1;
    fi;
fi;

if [ $install_ok = 0 ];
then
    echo ESP: Failed to install $libexecdir/steamcl.efi on $esp_mount;
    exit 1;
fi;

if [ $esp_boot_ok = 0 ];
then
    echo ESP: Failed to create boot entry $free_boot_id;
    exit 1;
fi;

exit 0;
